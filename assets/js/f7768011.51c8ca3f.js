"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7967],{3550:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"backend/personality screening/models","title":"Models","description":"PersonalityScreeningPreference","source":"@site/docs/backend/personality screening/models.md","sourceDirName":"backend/personality screening","slug":"/backend/personality screening/models","permalink":"/hr-documentation/backend/personality screening/models","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Endpoints","permalink":"/hr-documentation/backend/personality screening/endpoints"},"next":{"title":"Tasks","permalink":"/hr-documentation/backend/personality screening/tasks"}}');var l=i(4848),d=i(8453);const r={sidebar_position:2},c="Models",o={},t=[{value:"PersonalityScreeningPreference",id:"personalityscreeningpreference",level:2},{value:"Fields:",id:"fields",level:3},{value:"PersonalityScreening",id:"personalityscreening",level:2},{value:"Fields:",id:"fields-1",level:3},{value:"Methods:",id:"methods",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",ul:"ul",...(0,d.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"models",children:"Models"})}),"\n",(0,l.jsx)(n.h2,{id:"personalityscreeningpreference",children:"PersonalityScreeningPreference"}),"\n",(0,l.jsx)(n.p,{children:"Stores preferences for personality screening, including settings related to resume screening and question sets."}),"\n",(0,l.jsx)(n.h3,{id:"fields",children:"Fields:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"max_retries"})," (PositiveIntegerField): Maximum number of retries allowed (default: ",(0,l.jsx)(n.code,{children:"1"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"max_applicants"})," (PositiveIntegerField): Maximum number of applicants (default: ",(0,l.jsx)(n.code,{children:"100"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"include_questions"})," (BooleanField): Whether questions are included (default: ",(0,l.jsx)(n.code,{children:"True"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"service"})," (ForeignKey): Associated service (nullable, ",(0,l.jsx)(n.code,{children:"on_delete=models.SET_NULL"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"question_set"})," (ForeignKey): Question set linked to the screening (nullable, ",(0,l.jsx)(n.code,{children:"on_delete=models.SET_NULL"}),")."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"personalityscreening",children:"PersonalityScreening"}),"\n",(0,l.jsx)(n.p,{children:"Represents a personality screening assigned to a candidate for a specific job."}),"\n",(0,l.jsx)(n.h3,{id:"fields-1",children:"Fields:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"key"})," (CharField): Unique identifier for the screening (auto-generated UUID)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"step"})," (ForeignKey): Interview step associated with the screening (",(0,l.jsx)(n.code,{children:"on_delete=models.CASCADE"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"job"})," (ForeignKey): The job linked to the screening (nullable, ",(0,l.jsx)(n.code,{children:"on_delete=models.CASCADE"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"candidate"})," (ForeignKey): The candidate taking the screening (nullable, ",(0,l.jsx)(n.code,{children:"on_delete=models.CASCADE"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"question_set"})," (ForeignKey): Set of questions assigned to the screening (nullable, ",(0,l.jsx)(n.code,{children:"on_delete=models.DO_NOTHING"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"questions"})," (ManyToManyField): Collection of questions included in the screening."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"random_questions"})," (BooleanField): Whether questions should be randomized (default: ",(0,l.jsx)(n.code,{children:"False"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"random_questions_count"})," (PositiveIntegerField): Number of random questions (default: ",(0,l.jsx)(n.code,{children:"0"}),", nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"duration"})," (CharField): Time duration for the screening (nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"module"})," (ForeignKey): Interview module linked to the screening (nullable, ",(0,l.jsx)(n.code,{children:"on_delete=models.DO_NOTHING"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"feedback"})," (TextField): Feedback given for the screening (nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"feedback_status"})," (BooleanField): Whether feedback is provided (default: ",(0,l.jsx)(n.code,{children:"False"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"preference"})," (PositiveIntegerField): Preference setting for the screening (nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"revoked"})," (BooleanField): Indicates if the screening is revoked (default: ",(0,l.jsx)(n.code,{children:"False"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"link_opened"})," (BooleanField): Whether the screening link has been opened (default: ",(0,l.jsx)(n.code,{children:"False"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"link_opened_at"})," (DateTimeField): Timestamp when the link was opened (nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"started"})," (DateTimeField): Timestamp when the screening started (nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"completed"})," (BooleanField): Whether the screening is completed (nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"completed_time"})," (DateTimeField): Timestamp when the screening was completed (nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"status_text"})," (CharField): Status of the screening (default: ",(0,l.jsx)(n.code,{children:'"Assigned"'}),", nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"assigned_by"})," (ForeignKey): User who assigned the screening (nullable, ",(0,l.jsx)(n.code,{children:"on_delete=models.DO_NOTHING"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"revoked_by"})," (ForeignKey): User who revoked the screening (nullable, ",(0,l.jsx)(n.code,{children:"on_delete=models.DO_NOTHING"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"approved_by"})," (ForeignKey): User who approved the screening (nullable, ",(0,l.jsx)(n.code,{children:"on_delete=models.DO_NOTHING"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"users_shared_with"})," (ManyToManyField): Users who have shared access to the screening."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"expired_at"})," (DateTimeField): Expiration timestamp of the screening (nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"approved_at"})," (DateTimeField): Timestamp when the screening was approved (nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"assigned_at"})," (DateTimeField): Timestamp when the screening was assigned (auto-generated, nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"is_approved"})," (BooleanField): Whether the screening is approved (default: ",(0,l.jsx)(n.code,{children:"False"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"updated_at"})," (DateTimeField): Timestamp when the screening was last updated (nullable)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"updated_by"})," (ForeignKey): User who last updated the screening (nullable, ",(0,l.jsx)(n.code,{children:"on_delete=models.DO_NOTHING"}),")."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"methods",children:"Methods:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"__str__"}),": Returns a string representation of the personality screening."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var s=i(6540);const l={},d=s.createContext(l);function r(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);