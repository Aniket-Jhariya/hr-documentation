"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3083],{3715:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>a,frontMatter:()=>t,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"backend/test/models","title":"Models","description":"Difficulty","source":"@site/docs/backend/test/models.md","sourceDirName":"backend/test","slug":"/backend/test/models","permalink":"/hr-documentation/backend/test/models","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Endpoints","permalink":"/hr-documentation/backend/test/endpoints"},"next":{"title":"Tasks","permalink":"/hr-documentation/backend/test/tasks"}}');var d=s(4848),l=s(8453);const t={sidebar_position:2},r="Models",c={},o=[{value:"Difficulty",id:"difficulty",level:2},{value:"Fields:",id:"fields",level:3},{value:"Methods:",id:"methods",level:3},{value:"Domain",id:"domain",level:2},{value:"Fields:",id:"fields-1",level:3},{value:"Methods:",id:"methods-1",level:3},{value:"Category",id:"category",level:2},{value:"Fields:",id:"fields-2",level:3},{value:"Methods:",id:"methods-2",level:3},{value:"Questions",id:"questions",level:2},{value:"Fields:",id:"fields-3",level:3},{value:"Methods:",id:"methods-3",level:3},{value:"Test",id:"test",level:2},{value:"Fields:",id:"fields-4",level:3},{value:"Methods:",id:"methods-4",level:3},{value:"TestLog",id:"testlog",level:2},{value:"Fields:",id:"fields-5",level:3},{value:"Answers",id:"answers",level:2},{value:"Fields:",id:"fields-6",level:3},{value:"Result",id:"result",level:2},{value:"Fields:",id:"fields-7",level:3},{value:"Methods:",id:"methods-5",level:3}];function h(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(i.header,{children:(0,d.jsx)(i.h1,{id:"models",children:"Models"})}),"\n",(0,d.jsx)(i.h2,{id:"difficulty",children:"Difficulty"}),"\n",(0,d.jsx)(i.p,{children:"Stores different difficulty levels and their respective multipliers."}),"\n",(0,d.jsx)(i.h3,{id:"fields",children:"Fields:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"difficulty"})," (CharField): Name of the difficulty level."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"multiplier"})," (FloatField): Weight multiplier for the difficulty level."]}),"\n"]}),"\n",(0,d.jsx)(i.h3,{id:"methods",children:"Methods:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"__str__"}),": Returns a string representation of the difficulty."]}),"\n"]}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"domain",children:"Domain"}),"\n",(0,d.jsx)(i.p,{children:"Represents different domains of knowledge."}),"\n",(0,d.jsx)(i.h3,{id:"fields-1",children:"Fields:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"name"})," (CharField): Name of the domain."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"description"})," (TextField): Description of the domain."]}),"\n"]}),"\n",(0,d.jsx)(i.h3,{id:"methods-1",children:"Methods:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"__str__"}),": Returns the name of the domain."]}),"\n"]}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"category",children:"Category"}),"\n",(0,d.jsx)(i.p,{children:"Represents categories under different domains."}),"\n",(0,d.jsx)(i.h3,{id:"fields-2",children:"Fields:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"name"})," (CharField): Name of the category."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"description"})," (TextField): Description of the category."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"domains"})," (ManyToManyField): Domains associated with the category."]}),"\n"]}),"\n",(0,d.jsx)(i.h3,{id:"methods-2",children:"Methods:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"__str__"}),": Returns the name of the category."]}),"\n"]}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"questions",children:"Questions"}),"\n",(0,d.jsx)(i.p,{children:"Stores test questions and related data."}),"\n",(0,d.jsx)(i.h3,{id:"fields-3",children:"Fields:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"text"})," (TextField): Question text."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"html_content"})," (TextField): HTML-formatted content."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"type"}),' (CharField): Question type (default: "text").']}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"difficulty"})," (ForeignKey): Related difficulty level."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"domain"})," (CharField): Domain related to the question."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"choices"})," (JSONField): Answer choices in JSON format."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"photo"})," (FileField): Optional question image."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"query"})," (CharField): SQL query if applicable."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"created_by"})," (ForeignKey): User who created the question."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"created_at"})," (DateTimeField): Timestamp when created."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"updated_by"})," (ForeignKey): User who last updated the question."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"time_limit"})," (IntegerField): Time limit for answering."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"points"})," (IntegerField): Default points assigned to the question."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"question_set"})," (ManyToManyField): Question sets the question belongs to."]}),"\n"]}),"\n",(0,d.jsx)(i.h3,{id:"methods-3",children:"Methods:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"__str__"}),": Returns a string representation of the question."]}),"\n"]}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"test",children:"Test"}),"\n",(0,d.jsx)(i.p,{children:"Stores test-related data and settings."}),"\n",(0,d.jsx)(i.h3,{id:"fields-4",children:"Fields:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"title"})," (CharField): Title of the test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"key"})," (TextField): Unique identifier."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"created_at"})," (DateTimeField): Timestamp when created."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"description"})," (CharField): Description of the test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"created_by"})," (ForeignKey): User who created the test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"total_question"})," (IntegerField): Total number of questions."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"updated_by"})," (ForeignKey): User who last updated the test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"time_duration"})," (IntegerField): Time duration for the test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"question"})," (ManyToManyField): Associated questions."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"difficulty"})," (ForeignKey): Difficulty level."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"domain"})," (ManyToManyField): Domains associated."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"category"})," (ManyToManyField): Related categories."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"type"}),' (CharField): Type of test (e.g., "aptitude").']}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"is_deleted"})," (BooleanField): Indicates if the test is deleted."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"is_published"})," (BooleanField): Indicates if the test is published."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"published_by"})," (ForeignKey): User who published the test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"deleted_by"})," (ForeignKey): User who deleted the test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"users_shared_with"})," (ManyToManyField): Users the test is shared with."]}),"\n"]}),"\n",(0,d.jsx)(i.h3,{id:"methods-4",children:"Methods:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"__str__"}),": Returns the test title."]}),"\n"]}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"testlog",children:"TestLog"}),"\n",(0,d.jsx)(i.p,{children:"Tracks candidates assigned to tests."}),"\n",(0,d.jsx)(i.h3,{id:"fields-5",children:"Fields:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"test"})," (ManyToManyField): Related tests."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"prebuilt_assessment"})," (ManyToManyField): Related assessments."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"test_type"})," (CharField): Type of test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"key"})," (TextField): Unique key."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"preference"})," (ForeignKey): Test preferences."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"job"})," (ForeignKey): Job associated with the test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"assigned_to"})," (ForeignKey): Candidate assigned."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"assigned_by"})," (ForeignKey): User who assigned the test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"assigned_at"})," (DateTimeField): Assignment timestamp."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"completed"})," (BooleanField): Indicates if the test is completed."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"completed_at"})," (DateTimeField): Completion timestamp."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"valid_from"})," (DateTimeField): Test validity start."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"valid_to"})," (DateTimeField): Test validity end."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"started"})," (BooleanField): Indicates if the test has started."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"started_at"})," (DateTimeField): Start timestamp."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"link_opened"})," (BooleanField): Indicates if the test link was opened."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"link_opened_at"})," (DateTimeField): Timestamp when opened."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"is_approved"})," (BooleanField): Indicates if the candidate is approved."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"approved_at"})," (DateTimeField): Approval timestamp."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"approved_by"})," (ForeignKey): User who approved the test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"status_text"})," (CharField): Status of the test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"updated_by"})," (ForeignKey): User who last updated the log."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"updated_at"})," (DateTimeField): Timestamp of last update."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"users_shared_with"})," (ManyToManyField): Users with access."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"proctoring"})," (ForeignKey): Proctoring details."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"average_percentage"})," (FloatField): Average test score."]}),"\n"]}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"answers",children:"Answers"}),"\n",(0,d.jsx)(i.p,{children:"Stores candidates' test responses."}),"\n",(0,d.jsx)(i.h3,{id:"fields-6",children:"Fields:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"question"})," (ForeignKey): Question being answered."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"submitted_at"})," (DateTimeField): Timestamp of submission."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"text"})," (TextField): Answer text."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"type"})," (CharField): Type of response."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"job"})," (ForeignKey): Related job."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"candidate"})," (ForeignKey): Candidate who answered."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"test"})," (ForeignKey): Related test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"prebuilt_assessment"})," (ForeignKey): Related assessment."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"test_type"})," (CharField): Type of test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"test_log"})," (ForeignKey): Related test log."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"correct"})," (BooleanField): Indicates if the answer is correct."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"selected_choice"})," (JSONField): Selected answer choices."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"query"})," (TextField): SQL query answer (if applicable)."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"started_at"})," (DateTimeField): Start timestamp."]}),"\n"]}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"result",children:"Result"}),"\n",(0,d.jsx)(i.p,{children:"Stores test results for candidates."}),"\n",(0,d.jsx)(i.h3,{id:"fields-7",children:"Fields:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"id"})," (UUIDField): Unique ID."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"test"})," (ForeignKey): Related test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"prebuilt_assessment"})," (ForeignKey): Related assessment."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"test_type"})," (CharField): Type of test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"candidate"})," (ForeignKey): Candidate who took the test."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"test_log"})," (ForeignKey): Related test log."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"job"})," (ForeignKey): Related job."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"score"})," (FloatField): Candidate's score."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"correct_answer_count"})," (IntegerField): Count of correct answers."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"wrong_answer_count"})," (IntegerField): Count of incorrect answers."]}),"\n"]}),"\n",(0,d.jsx)(i.h3,{id:"methods-5",children:"Methods:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"__str__"}),": Returns a string representation of the result."]}),"\n"]})]})}function a(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,d.jsx)(i,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}},8453:(e,i,s)=>{s.d(i,{R:()=>t,x:()=>r});var n=s(6540);const d={},l=n.createContext(d);function t(e){const i=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),n.createElement(l.Provider,{value:i},e.children)}}}]);